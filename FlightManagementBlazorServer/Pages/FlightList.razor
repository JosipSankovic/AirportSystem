@page "/FlightList"
@using FlightManagementBlazorServer.Services
@inject FlightService _flightService;
@inject NavigationManager _navigationManager;
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]


<h3>Flights</h3>
<AuthorizeView Roles="Admin">
    <button type="button" class="btn btn-success" @onclick="OpenAddFlightPage">
        <span class="oi oi-plus"></span>
        Add Flight
    </button>
</AuthorizeView>
        @if (Flights == null)
        {
    <div>Loading...</div> }
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Number</th>
                <th>Date</th>
                <th>Time</th>
                <th>Carrier</th>
                <th>Airport to</th>
                <AuthorizeView Roles="Admin">
                    <th>For Flights</th>
                </AuthorizeView>
                <th>For passengers</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var flight in Flights)
            {
            <tr>
                <td>@flight.Number</td>
                <td>@flight.FlightDate.ToString("dd.MM.yyyy")</td>
                <td>@flight.FlightTime</td>
                <td>@flight.Carrier?.Name</td>
                <td>@flight.AirportTo</td>
                <AuthorizeView Roles="Admin">
                    <td>

                        <a href="/EditFlight/@flight.Id" class="btn btn-primary">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button type="button" class="btn btn-danger" @onclick="() => DeleteFlight(flight.Id)">
                            <span class="oi oi-delete"></span>
                        </button>
                        <button type="button" class="btn btn-secondary" @onclick="() => ArchiveFlight(flight.Id)">
                            <span class="oi oi-transfer"></span>
                        </button>

                    </td>
                </AuthorizeView>
                <td>
                    <AuthorizeView Roles="Admin">

                        <button type="button" class="btn btn-primary" @onclick="()=>AddPassenger(flight.Id)">
                            <span class="oi oi-pencil"></span>
                        </button>
                    </AuthorizeView>
                    <button type="button" class="btn btn-outline-primary" @onclick="()=>CheckInPassengers(flight.Id)">
                        <span class="oi oi-check"></span>
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="()=>ShowPassengers(flight.Id)">
                        <span class="oi oi-target"></span>
                    </button>
                    <button type="button" class="btn btn-link" @onclick="()=>CheckedPassengersList(flight.Id)">
                        <span class="oi oi-list"></span>
                    </button>
                </td>
            </tr>
    }

        </tbody>
    </table>
    }

        <ConfirmationDialog @ref="DeleteConfirmationDialog" ConfirmationChanged="@OnDeleteConfirmationSelected" Question="Delete flight?"></ConfirmationDialog>
        <ConfirmationDialog @ref="ArchiveConfirmationDialog" ConfirmationChanged="@OnArchiveConfirmationSelected" Question="Archive flight?"></ConfirmationDialog>

      

 
        
 

    



<AuthorizeView>
    <NotAuthorized>
        <p>Not authotorized</p>
    </NotAuthorized>
</AuthorizeView>
@code { private List<Flight> Flights;
    public ConfirmationDialog DeleteConfirmationDialog { get; set; }
    public ConfirmationDialog ArchiveConfirmationDialog { get; set; }
    public int SelectedFlightId { get; set; }
    public List<String> Role { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Flights = await _flightService.GetFlights();

    }

    private void OpenAddFlightPage()
    {
        _navigationManager.NavigateTo("/AddFlight");
    }

    private async Task DeleteFlight(int flightId)
    {
        SelectedFlightId = flightId;
        DeleteConfirmationDialog.Show();
    }

    private async Task OnDeleteConfirmationSelected(bool isDeleteConfirmed)
    {
        if (isDeleteConfirmed)
        {
            await _flightService.DeleteFlight(SelectedFlightId);
            Flights = await _flightService.GetFlights();
        }
    }

    private async Task OnArchiveConfirmationSelected(bool isArchiveConfirmed)
    {
        if (isArchiveConfirmed)
        {
            await _flightService.ArchiveFlight(SelectedFlightId);
            Flights = await _flightService.GetFlights();
        }
    }

    private async Task ArchiveFlight(int flightId)
    {
        SelectedFlightId = flightId;
        ArchiveConfirmationDialog.Show();
    }

    private void AddPassenger(int flightId)
    {
        _navigationManager.NavigateTo($"/AddPassenger/{flightId}");
    }

    private void ShowPassengers(int flightId)
    {
        _navigationManager.NavigateTo($"/PassengerList/{flightId}");
    }

    private void CheckInPassengers(int flightId)
    {
        _navigationManager.NavigateTo($"/CheckInPassenger/{flightId}");
    }


    private void CheckedPassengersList(int flightId)
    {
        _navigationManager.NavigateTo($"/CheckedPassengerList/{flightId}");
    }

    }
