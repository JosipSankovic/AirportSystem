@page "/CheckInPassenger/{flightId}"
@inject PassengerService _passengerService
@inject NavigationManager _navigation
@using System.Text;
@attribute [Authorize]
<h3>CheckInPassenger</h3>
@if (passengers != null)
{
    <EditForm Model="@passengers" OnValidSubmit="@CheckIn">
        <label for="SelectPassenger">Select passenger</label>
        <InputSelect id="SelectPassenger" @bind-Value="@passenger.Id" class="form-control">
            @foreach (var pass in passengers)
                {

                @if (pass.Checked == false)
                    {

                    <option value="@pass.Id">@pass.Name @pass.Lastname</option>
                    }
                }
        </InputSelect>
        <label for="SeatNumber">Seat number</label>
        <InputText if="SeatNumber" @bind-Value="@passenger.SeatNumber" class="form-control"></InputText>

        <label for="DocumentDate">Expiration date</label>
        <InputDate id="DocumentDate" @bind-Value="@passenger.DocumentExpirationDate" class="form-control"></InputDate>

        <label for="DocumentName">Name in document</label>
        <InputText id="DocumentName" @bind-Value="@passenger.DocumentName" class="form-control"></InputText>

        <label for="DocumentLastname">Lastname in document</label>
        <InputText id="DocumentLastname" @bind-Value="@passenger.DocumentLastname" class="form-control"></InputText>

        <label for="DocumentType">Document type</label>
        <InputSelect id="DocumentType" @bind-Value="@passenger.DocumentType" class="form-control">
            <option value="Passport">Passport</option>
            <option value="ID card">ID card</option>
        </InputSelect>

        <label for="DocumentNumber">Document number</label>
        <InputText id="DocumentNumber" @bind-Value="@passenger.DocumentNumber" class="form-control"></InputText>




        <button type="submit">Add passenger</button>
    </EditForm>
}
<NotificationDialog @ref="@_notificationDialog" Description="@notification"></NotificationDialog>


@code {
    [Parameter]
    public string flightId { get; set; }
    public List<Passenger> passengers { get; set; }
    public Passenger passenger { get; set; }

    public NotificationDialog _notificationDialog { get; set; }
    public string notification { get; set; }


    protected override async Task OnInitializedAsync()
    {
        passengers = await _passengerService.GetPassengersAsync(int.Parse(flightId));
        passenger = new Passenger();
        passenger.DocumentType = "Passport";
        passenger.DocumentExpirationDate = DateTime.Now;
    }

    private async Task CheckIn()
    {
        var validationError = ValidatePassenger();
        if (validationError.Any())
        {
            notification = GetConcatenatedValidationErrors(validationError);
            _notificationDialog.Show();
        }else
        {
            passenger.Checked = true;
            await _passengerService.CheckInPassengerAsync(passenger);
            _navigation.NavigateTo("/FlightList");
        }

    }

    private List<ValidationError> ValidatePassenger()
    {
        List<ValidationError> validationErrors = new List<ValidationError>();

        if (passenger.Id == 0)
        {
            validationErrors.Add(new ValidationError { Description = "Select passenger" });
        }
        if (string.IsNullOrWhiteSpace(passenger.SeatNumber))
        {
            validationErrors.Add(new ValidationError { Description = "Add Seat number" });
        }
        if (string.IsNullOrWhiteSpace(passenger.DocumentLastname))
        {
            validationErrors.Add(new ValidationError { Description = "Add Document Last name" });
        }
        if (string.IsNullOrWhiteSpace(passenger.DocumentName))
        {
            validationErrors.Add(new ValidationError { Description = "Add Document Name" });
        }

        if (string.IsNullOrWhiteSpace(passenger.DocumentNumber))
        {
            validationErrors.Add(new ValidationError { Description = "Add Document Number" });
        }




        return validationErrors;
    }

    private string GetConcatenatedValidationErrors(List<ValidationError> ValidationErrors)
    {
        StringBuilder message = new StringBuilder();
        foreach (var error in ValidationErrors)
        {
            if (message.Length == 0)
                message.Append(error.Description);
            else
                message.Append($"<br/>{error.Description}");

        }
        return message.ToString();
    }

}
